<!--
***********************************************************************************************
Microsoft.NET.Sdk.Functions.Build.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

***********************************************************************************************
-->
<Project ToolsVersion="14.0"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ============================================================
                  _GenerateFunctionsPostBuild

    Generates the function.json for all the functions in the project.
    ============================================================
    -->
  <Target Name="_GenerateFunctionsPostBuild"
          AfterTargets="Build">
    <PropertyGroup>
      <UseNETCoreGenerator Condition="$(UseNETCoreGenerator)=='' AND !$(AzureFunctionsVersion.StartsWith('v1'))">true</UseNETCoreGenerator>
    </PropertyGroup>

    <ItemGroup>
      <FunctionsBuildAssemblies Include="$(TargetDir)*.dll;
                                         $(TargetDir)*.pdb" />
    </ItemGroup>

    <!-- Copy the additional assemblies to the bin folder-->
    <Move SourceFiles="@(FunctionsBuildAssemblies)"
          DestinationFiles="$(TargetDir)bin\%(Filename)%(Extension)"
          OverwriteReadOnlyFiles="true" />

    <ItemGroup>
      <UserProvidedFunctionJsonFiles Include="@(None);@(Content)" Condition="Exists(%(Identity))
                                     AND $([System.String]::Copy('%(Identity)').Replace('/','\').EndsWith('\function.json'))
                                     AND ('%(None.CopyToOutputDirectory)' == 'Always' OR '%(None.CopyToOutputDirectory)' == 'PreserveNewest'
                                           OR '%(Content.CopyToOutputDirectory)' == 'Always' OR '%(Content.CopyToOutputDirectory)' == 'PreserveNewest')"/>
    </ItemGroup>

    <GenerateFunctions
      TargetPath="$(TargetPath)"
      OutputPath="$(TargetDir)"
      UseNETCoreGenerator="$(UseNETCoreGenerator)"
      UseNETFrameworkGenerator="$(UseNETFrameworkGenerator)"
      UserProvidedFunctionJsonFiles="@(UserProvidedFunctionJsonFiles)" 
      FunctionsInDependencies="$(FunctionsInDependencies)"
      TaskAssemblyDirectory="$(_FunctionsTasksDir)"/>
  </Target>
  
    <!--
    ============================================================
                  _FunctionsBeforeCopyFilesToOutputDirectory

    Sets the correct runtime folder for functions
    ============================================================
    -->
  <Target Name="_FunctionsBeforeCopyFilesToOutputDirectory"
          BeforeTargets="CopyFilesToOutputDirectory">
      <PropertyGroup>
        <BackUpOutDirPropertyValue>$(OutDir)</BackUpOutDirPropertyValue>
        <OutDir>$(OutDir)bin\</OutDir>
      </PropertyGroup>
  </Target>
  
      <!--
    ============================================================
                  _FunctionsAfterCopyFilesToOutputDirectory

    Resets the correct runtime folder for functions
    ============================================================
    -->
  <Target Name="_FunctionsAfterCopyFilesToOutputDirectory"
          AfterTargets="CopyFilesToOutputDirectory">
      <PropertyGroup>
        <OutDir>$(BackUpOutDirPropertyValue)</OutDir>
      </PropertyGroup>
  </Target>

 <!--
    ============================================================
        _FunctionsPostBuildDepsCopy

    Copies the deps file to the Functions bin folder
    ============================================================
    -->
  <Target Name="_FunctionsPostBuildDepsCopy" AfterTargets="PostBuildEvent" Condition="'$(SkipFunctionsDepsCopy)' != 'true'">
    <Copy SourceFiles="$(OutDir)$(AssemblyName).deps.json" DestinationFiles="$(OutDir)bin\function.deps.json" Condition="Exists('$(OutDir)$(AssemblyName).deps.json')"/>
  </Target>

  <!--
    ============================================================
        _ResolveAdditionalReferenceCopyLocalPathsForFunctions

    CopyLocalLockFileAssemblies does not copy all the required assemblies 
    to the TargetDir folder. This target will copy all the required files
    to the TargetDir folder.
    ============================================================
    -->
  <Target
   Name="_ResolveAdditionalReferenceCopyLocalPathsForFunctions"
   AfterTargets="ResolveReferences"
     >

    <!-- Force the binaries to be copied to the bin folder.-->
    <ItemGroup>
      <ReferenceCopyLocalPaths>
        <DestinationSubDirectory>bin\%(ReferenceCopyLocalPaths.DestinationSubDirectory)</DestinationSubDirectory>
      </ReferenceCopyLocalPaths>

      <ResolvedAssembliesToPublish>
        <DestinationSubPath>bin\%(ResolvedAssembliesToPublish.DestinationSubPath)</DestinationSubPath>
      </ResolvedAssembliesToPublish>
    </ItemGroup>
  
    <!-- Target path needs to point to the correct dll so that P2P references work. -->
    <PropertyGroup>
        <TargetPath>$(TargetDir)bin\$(TargetFileName)</TargetPath>
    </PropertyGroup>
  
  </Target>
 
    <!--
    ============================================================
                     _FunctionsGetTargetPathWithTargetPlatformMoniker

     When building a referenced class library from the IDE, it just gathers the build outputs.
    since IDE has already built the project.

    In this case a seperate msbuild call to GetTargetPath is done from ResolveProjectReferences
    in Microsoft.Common.CurrentVersion.targets. 
    
    Updating the TargetPath before this call will make sure that the right path will be returned.
    
    This fixed the p2p reference issues from non-Rosyln project system based class library.
    ============================================================
    -->
  
    <Target Name="_FunctionsGetTargetPathWithTargetPlatformMoniker" 
            BeforeTargets="GetTargetPathWithTargetPlatformMoniker" >
      
      <PropertyGroup>
          <TargetPath>$(TargetDir)bin\$(TargetFileName)</TargetPath>
      </PropertyGroup>
    
  </Target>
  

  <!--
    ============================================================
                     _CleanFunctions

    Cleans up all the files in $(TargetDir)
    ============================================================
    -->
  <Target
    Name="_CleanFunctions"
    AfterTargets="Clean">

    <ItemGroup>
      <_FilesInTargetDir Include="$(TargetDir)**\*" />
    </ItemGroup>

    <Delete Files="@(_FilesInTargetDir)"
            ContinueOnError="true" />

    <RemoveDir Directories="$(TargetDir)"
               ContinueOnError="true" />
  </Target>

</Project>
