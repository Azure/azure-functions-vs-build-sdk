<!--
***********************************************************************************************
Microsoft.NET.Sdk.Functions.Build.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

***********************************************************************************************
-->
<Project ToolsVersion="14.0"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ============================================================
                  _GenerateFunctionsPostBuild

    Generates the function.json for all the functions in the project.
    ============================================================
    -->
  <Target Name="_GenerateFunctionsPostBuild"
          AfterTargets="Build">
    <PropertyGroup>
      <UseNETCoreGenerator Condition="$(UseNETCoreGenerator)=='' AND ($(AzureFunctionsVersion) == 'v2' OR $(AzureFunctionsVersion) == 'v2-prerelease' )">true</UseNETCoreGenerator>
    </PropertyGroup>
    <!-- TODO: CopyFilesToOutputDirectory does not look at the outdir to copy the pdbs. hence copying it manually. -->
    <!-- Copy the application pdb to the bin folder-->
    <Move SourceFiles="$(TargetDir)$(TargetName).pdb"
      DestinationFiles="$(TargetDir)bin\$(TargetName).pdb"
      OverwriteReadOnlyFiles="true" 
      Condition="Exists('$(TargetDir)$(TargetName).pdb')"
      ContinueOnError="true"/>

    <ItemGroup>
      <UserProvidedFunctionJsonFiles Include="@(None);@(Content)" Condition="Exists(%(Identity))
                                     AND $([System.String]::Copy('%(Identity)').Replace('/','\').EndsWith('\function.json'))
                                     AND ('%(None.CopyToOutputDirectory)' == 'Always' OR '%(None.CopyToOutputDirectory)' == 'PreserveNewest'
                                           OR '%(Content.CopyToOutputDirectory)' == 'Always' OR '%(Content.CopyToOutputDirectory)' == 'PreserveNewest')"/>
    </ItemGroup>

    <GenerateFunctions
      TargetPath="$(TargetPath)"
      OutputPath="$(TargetDir)"
      UseNETCoreGenerator="$(UseNETCoreGenerator)"
      UseNETFrameworkGenerator="$(UseNETFrameworkGenerator)"
      UserProvidedFunctionJsonFiles="@(UserProvidedFunctionJsonFiles)" 
      FunctionsInDependencies="$(FunctionsInDependencies)"/>
  </Target>
  
    <!--
    ============================================================
                  _FunctionsBeforeCopyFilesToOutputDirectory

    Sets the correct runtime folder for functions
    ============================================================
    -->
  <Target Name="_FunctionsBeforeCopyFilesToOutputDirectory"
          BeforeTargets="CopyFilesToOutputDirectory">
      <PropertyGroup>
        <BackUpOutDirPropertyValue>$(OutDir)</BackUpOutDirPropertyValue>
        <OutDir>$(OutDir)bin\</OutDir>
      </PropertyGroup>
  </Target>
  
      <!--
    ============================================================
                  _FunctionsAfterCopyFilesToOutputDirectory

    Resets the correct runtime folder for functions
    ============================================================
    -->
  <Target Name="_FunctionsAfterCopyFilesToOutputDirectory"
          AfterTargets="CopyFilesToOutputDirectory">
      <PropertyGroup>
        <OutDir>$(BackUpOutDirPropertyValue)</OutDir>
      </PropertyGroup>
  </Target>

  <!--
    ============================================================
        _ResolveAdditionalReferenceCopyLocalPathsForFunctions

    CopyLocalLockFileAssemblies does not copy all the required assemblies 
    to the TargetDir folder. This target will copy all the required files
    to the TargetDir folder.
    ============================================================
    -->
  <Target
   Name="_ResolveAdditionalReferenceCopyLocalPathsForFunctions"
   DependsOnTargets="_RunResolvePublishAssembliesForFunctions"
   AfterTargets="ResolveReferences"
     >

    <!--
      Copy publish assemblies that not already included in ReferenceCopyLocalPaths
      via CopyLocalLockFileAssemblies=true. This will include RID-specific assets 
      that would be published in  the runtimes/ folder, but excluded from 
      CopyLocalLockFileAssemblies when no RuntimeIdentifier is set.
    -->
    <ItemGroup Condition="'$(RuntimeIdentifier)' == ''">
      <!-- 
       NOTE: The exclusion here is to ensure that we do not override any existing 
             ReferenceCopyLocalPaths with assets from RunResolvedPublishAssemblies.
             The ReferenceCopyLocalPaths can have conflicts resolved that are not 
             also resolved in the publish set, and publish currently relies on copy
             local paths having precedence over it to ensure conflict resolution 
             applies. We must preserve that precedence here.
     -->
      <_RidSpecificAssembliesByDestination
        Include="@(ResolvedAssembliesToPublish->'%(DestinationSubPath)')"
        Exclude="@(ReferenceCopyLocalPaths->'%(DestinationSubDirectory)%(Filename)%(Extension)')"
        OriginalItemSpec="%(ResolvedAssembliesToPublish.Identity)"
       />

      <_RidSpecificAssembliesByDestination
        DestinationSubDirectory="%(_RidSpecificAssembliesByDestination.RelativeDir)"
       />

      <ReferenceCopyLocalPaths
        Include="@(_RidSpecificAssembliesByDestination->'%(OriginalItemSpec)')"
        Exclude="@(ReferenceCopyLocalPaths)"
       />
      
    </ItemGroup>

    <!--
       Copy reference assemblies needed for runtime compilation to refs/ folder. Only 
       those that are not a also runtime assemblies and therefore already included in 
       ReferenceCopyLocalPaths via CopyLocalLockFileAssemblies=true are needed.
      -->
    <ItemGroup Condition="'$(PreserveCompilationContext)' == 'true'">
      <ReferenceCopyLocalPaths
        Include="@(ReferencePath)"
        Exclude="@(ReferenceCopyLocalPaths)"
        DestinationSubDirectory="$(RefAssembliesFolderName)\"/>
    </ItemGroup>

    <!-- Force the binaries to be copied to the bin folder.-->
    <ItemGroup>
      <ReferenceCopyLocalPaths>
        <DestinationSubDirectory>bin\%(ReferenceCopyLocalPaths.DestinationSubDirectory)</DestinationSubDirectory>
      </ReferenceCopyLocalPaths>

      <ResolvedAssembliesToPublish>
        <DestinationSubPath>bin\%(ResolvedAssembliesToPublish.DestinationSubPath)</DestinationSubPath>
      </ResolvedAssembliesToPublish>
    </ItemGroup>
  
    <!-- Target path needs to point to the correct dll so that P2P references work. -->
    <PropertyGroup>
        <TargetPath>$(TargetDir)bin\$(TargetFileName)</TargetPath>
    </PropertyGroup>
  
  </Target>

  <!-- 
     We only need to call _RunResolvePublishAssembliesForFunctions during build when we do not 
     have a RuntimeIdentifier.Otherwise, we already have everything we need from
     CopyLocalLockFileAssemblies.
   -->
  <Target
    Name="_RunResolvePublishAssembliesForFunctions"
    Condition="'$(RuntimeIdentifier)' == ''"
    DependsOnTargets="RunResolvePublishAssemblies"
  />
  
  
    <!--
    ============================================================
                     _FunctionsGetTargetPathWithTargetPlatformMoniker

     When building a referenced class library from the IDE, it just gathers the build outputs.
    since IDE has already built the project.

    In this case a seperate msbuild call to GetTargetPath is done from ResolveProjectReferences
    in Microsoft.Common.CurrentVersion.targets. 
    
    Updating the TargetPath before this call will make sure that the right path will be returned.
    
    This fixed the p2p reference issues from non-Rosyln project system based class library.
    ============================================================
    -->
  
    <Target Name="_FunctionsGetTargetPathWithTargetPlatformMoniker" 
            BeforeTargets="GetTargetPathWithTargetPlatformMoniker" >
      
      <PropertyGroup>
          <TargetPath>$(TargetDir)bin\$(TargetFileName)</TargetPath>
      </PropertyGroup>
    
  </Target>
  

  <!--
    ============================================================
                     _CleanFunctions

    Cleans up all the files in $(TargetDir)
    ============================================================
    -->
  <Target
    Name="_CleanFunctions"
    AfterTargets="Clean">

    <ItemGroup>
      <_FilesInTargetDir Include="$(TargetDir)**\*" />
    </ItemGroup>

    <Delete Files="@(_FilesInTargetDir)"
            ContinueOnError="true" />

    <RemoveDir Directories="$(TargetDir)"
               ContinueOnError="true" />
  </Target>

</Project>
