parameters:
  - name: SkipBuildArtifacts
    type: boolean
    default: false

jobs:
- job: BuildAndTest
  displayName: Build and Test

  templateContext:
    outputParentDirectory: $(Build.ArtifactStagingDirectory)
    outputs:
    - ${{ if eq(parameters.SkipBuildArtifacts, false) }}:
      - output: pipelineArtifact
        displayName: Publish artifacts
        path: $(Build.ArtifactStagingDirectory)/pkg
        artifact: drop

  steps:
  - task: UseDotNet@2
    displayName: 'Install dotnet v2.x'
    inputs:
      packageType: 'sdk'
      version: '2.2.x'
      performMultiLevelLookup: true
  - task: UseDotNet@2
    displayName: 'Install dotnet v3.x'
    inputs:
      packageType: 'sdk'
      version: '3.1.x'
      performMultiLevelLookup: true

  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'build'
      arguments: -c Release
      projects: |
        src\**\Microsoft.NET.Sdk.Functions.MSBuild.csproj
        src\**\Microsoft.NET.Sdk.Functions.Generator.csproj
        src\**\Microsoft.NET.Sdk.Functions.csproj

  - task: CmdLine@2
    inputs:
      script: |
        powershell Invoke-WebRequest -Uri 'https://dot.net/v1/dotnet-install.ps1' -UseBasicParsing -OutFile '%TEMP%\dotnet-install.ps1'
        powershell %TEMP%\dotnet-install.ps1 -Architecture x64 -Version '3.1.301' -InstallDir '%ProgramFiles%\dotnet'
        .paket\paket.exe install
        packages\FAKE\tools\fake .\build.fsx
    env:
      FILES_ACCOUNT_KEY: $(FILES_ACCOUNT_KEY)
      FILES_ACCOUNT_NAME: $(FILES_ACCOUNT_NAME)
      BUILD_VERSION: 1.1.$(devops_buildNumber)
    displayName: 'Build'

  - task: PowerShell@2
    displayName: 'Set dotnet path'
    inputs:
      targetType: 'inline'
      script: |
        $infoContent = dotnet --info
        $sdkBasePath = $infoContent  |
            Where-Object {$_ -match 'Base Path:'} |
            ForEach-Object {
                ($_ -replace '\s+Base Path:','').trim()
            }    
        Write-Host  "dotnet SDK path: $sdkBasePath"
        $dotnetPath = (Get-Item $sdkBasePath).Parent.Parent.FullName
        Write-Host "dotnet path: $dotnetPath"
        Write-Host "##vso[task.setvariable variable=DotNetPath]$dotnetPath"

  - task: DotNetCoreCLI@2
    displayName: End to End tests
    inputs:
      command: test
      projects: |
        **\FunctionsSdkE2ETests\FunctionsSdkE2ETests.sln
      arguments: -v n

  - ${{ if eq(parameters.SkipBuildArtifacts, false) }}:
    - template: ci/sign-files.yml@eng
      parameters:
        displayName: Sign Functions assemblies
        folderPath: src/Microsoft.NET.Sdk.Functions.MSBuild/bin/Release/
        pattern: Microsoft.NET.Sdk.Functions.MSBuild.dll
        signType: dll-strong-name      

    - template: ci/sign-files.yml@eng
      parameters:
        displayName: Sign Functions assemblies
        folderPath: src/Microsoft.NET.Sdk.Functions.Generator/bin/Release/
        pattern: Microsoft.NET.Sdk.Functions.Generator.dll
        signType: dll-strong-name      

    - template: ci/sign-files.yml@eng
      parameters:
        displayName: Sign third party assemblies
        folderPath: src/Microsoft.NET.Sdk.Functions.Generator/bin/Release/
        pattern: Newtonsoft.Json.dll
        signType: dll

    - template: ci/sign-files.yml@eng
      parameters:
        displayName: Sign third party assemblies
        folderPath: src/Microsoft.NET.Sdk.Functions.Generator/bin/Release
        pattern: Mono.Cecil.dll
        signType: dll

    - task: DotNetCoreCLI@2
      displayName: 'Pack Microsoft.Net.Sdk.Functions package'
      inputs:
        command: 'custom'
        custom: 'pack'
        arguments: '--no-build -c Release -o $(Build.ArtifactStagingDirectory)/pkg'
        projects: |
          **\Microsoft.Net.Sdk.Functions.csproj

    - template: ci/sign-files.yml@eng
      parameters:
        displayName: Sign NugetPackages
        folderPath: $(Build.ArtifactStagingDirectory)/pkg
        pattern: Microsoft.Net.Sdk.Functions*.nupkg
        signType: nuget