parameters:
  - name: SkipBuildArtifacts
    type: boolean
    default: false

jobs:
- job: BuildAndTest
  displayName: Build and Test

  templateContext:
    outputParentDirectory: $(Build.ArtifactStagingDirectory)
    outputs:
    - ${{ if eq(parameters.SkipBuildArtifacts, false) }}:
      - output: pipelineArtifact
        displayName: Publish artifacts
        path: $(Build.ArtifactStagingDirectory)/pkg
        artifact: drop

  steps:
  - task: UseDotNet@2
    displayName: Install .NET 6
    inputs:
      version: 6.x

  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'build'
      arguments: -c Release
      projects: |
        src\**\Microsoft.NET.Sdk.Functions.MSBuild.csproj
        src\**\Microsoft.NET.Sdk.Functions.Generator.csproj
        src\**\Microsoft.NET.Sdk.Functions.csproj

  - task: DotNetCoreCLI@2
    displayName: Unit Tests
    inputs:
      command: test
      projects: |
        **\Microsoft.NET.Sdk.Functions.Generator.Tests.csproj
        **\Microsoft.NET.Sdk.Functions.MSBuild.Tests.csproj
        **\Microsoft.NET.Sdk.Functions.EndToEnd.Tests.csproj

  - task: DotNetCoreCLI@2
    displayName: End to End tests
    inputs:
      command: test
      projects: |
        **\FunctionsSdkE2ETests\FunctionsSdkE2ETests.sln
      arguments: -v n

  - ${{ if eq(parameters.SkipBuildArtifacts, false) }}:
    - template: ci/sign-files.yml@eng
      parameters:
        displayName: Sign Functions assemblies
        folderPath: src/Microsoft.NET.Sdk.Functions.MSBuild/bin/Release/
        pattern: Microsoft.NET.Sdk.Functions.MSBuild.dll
        signType: dll-strong-name      

    - template: ci/sign-files.yml@eng
      parameters:
        displayName: Sign Functions assemblies
        folderPath: src/Microsoft.NET.Sdk.Functions.Generator/bin/Release/
        pattern: Microsoft.NET.Sdk.Functions.Generator.dll
        signType: dll-strong-name      

    - template: ci/sign-files.yml@eng
      parameters:
        displayName: Sign third party assemblies
        folderPath: src/Microsoft.NET.Sdk.Functions.Generator/bin/Release/
        pattern: Newtonsoft.Json.dll
        signType: dll

    - template: ci/sign-files.yml@eng
      parameters:
        displayName: Sign third party assemblies
        folderPath: src/Microsoft.NET.Sdk.Functions.Generator/bin/Release
        pattern: Mono.Cecil.dll
        signType: dll

    - task: DotNetCoreCLI@2
      displayName: 'Pack Microsoft.Net.Sdk.Functions package'
      inputs:
        command: 'custom'
        custom: 'pack'
        arguments: '--no-build -c Release -o $(Build.ArtifactStagingDirectory)/pkg'
        projects: |
          **\Microsoft.Net.Sdk.Functions.csproj

    - template: ci/sign-files.yml@eng
      parameters:
        displayName: Sign NugetPackages
        folderPath: $(Build.ArtifactStagingDirectory)/pkg
        pattern: Microsoft.Net.Sdk.Functions*.nupkg
        signType: nuget
